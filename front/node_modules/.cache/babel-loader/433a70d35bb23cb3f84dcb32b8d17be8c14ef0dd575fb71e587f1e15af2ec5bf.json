{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3000/api' // Base URL of your backend API\n});\nlet isRefreshing = false; // Flag to prevent multiple refresh attempts\nlet refreshSubscribers = []; // Array to store subscribers waiting for new token\n\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\naxiosInstance.interceptors.response.use(response => response,\n// Pass along successful responses\nerror => {\n  const {\n    config,\n    response: {\n      status\n    }\n  } = error;\n  const originalRequest = config;\n  if (status === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise((resolve, reject) => {\n        refreshSubscribers.push(token => {\n          originalRequest.headers.Authorization = 'Bearer ' + token;\n          resolve(axiosInstance(originalRequest));\n        });\n      });\n    } else {\n      isRefreshing = true;\n      originalRequest._retry = true;\n      return new Promise((resolve, reject) => {\n        axiosInstance.post('/auth/refresh') // Adjust your refresh endpoint\n        .then(({\n          data\n        }) => {\n          localStorage.setItem('token', data.token);\n          axiosInstance.defaults.headers.common['Authorization'] = 'Bearer ' + data.token;\n          originalRequest.headers['Authorization'] = 'Bearer ' + data.token;\n          refreshSubscribers.forEach(cb => cb(data.token));\n          refreshSubscribers = [];\n          resolve(axiosInstance(originalRequest));\n        }).catch(err => {\n          reject(err);\n          isRefreshing = false;\n        });\n      });\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","isRefreshing","refreshSubscribers","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","originalRequest","_retry","resolve","push","post","then","data","setItem","defaults","common","forEach","cb","catch","err"],"sources":["/Users/samarthmishra/Samarth/TaskGaurdian/app/src/components/axiosConfig.js"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    baseURL: 'http://localhost:3000/api' // Base URL of your backend API\n});\n\nlet isRefreshing = false; // Flag to prevent multiple refresh attempts\nlet refreshSubscribers = []; // Array to store subscribers waiting for new token\n\naxiosInstance.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\naxiosInstance.interceptors.response.use(\n    response => response, // Pass along successful responses\n    (error) => {\n        const { config, response: { status } } = error;\n        const originalRequest = config;\n\n        if (status === 401 && !originalRequest._retry) {\n            if (isRefreshing) {\n                return new Promise((resolve, reject) => {\n                    refreshSubscribers.push((token) => {\n                        originalRequest.headers.Authorization = 'Bearer ' + token;\n                        resolve(axiosInstance(originalRequest));\n                    });\n                });\n            } else {\n                isRefreshing = true;\n                originalRequest._retry = true;\n\n                return new Promise((resolve, reject) => {\n                    axiosInstance.post('/auth/refresh') // Adjust your refresh endpoint\n                        .then(({ data }) => {\n                            localStorage.setItem('token', data.token);\n                            axiosInstance.defaults.headers.common['Authorization'] = 'Bearer ' + data.token;\n                            originalRequest.headers['Authorization'] = 'Bearer ' + data.token;\n\n                            refreshSubscribers.forEach(cb => cb(data.token));\n                            refreshSubscribers = [];\n\n                            resolve(axiosInstance(originalRequest));\n                        })\n                        .catch((err) => {\n                            reject(err);\n                            isRefreshing = false;\n                        });\n                });\n            }\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAE,2BAA2B,CAAC;AACzC,CAAC,CAAC;AAEF,IAAIC,YAAY,GAAG,KAAK,CAAC,CAAC;AAC1B,IAAIC,kBAAkB,GAAG,EAAE,CAAC,CAAC;;AAE7BJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;AAEDd,aAAa,CAACK,YAAY,CAACY,QAAQ,CAACV,GAAG,CACnCU,QAAQ,IAAIA,QAAQ;AAAE;AACrBH,KAAK,IAAK;EACP,MAAM;IAAEN,MAAM;IAAES,QAAQ,EAAE;MAAEC;IAAO;EAAE,CAAC,GAAGJ,KAAK;EAC9C,MAAMK,eAAe,GAAGX,MAAM;EAE9B,IAAIU,MAAM,KAAK,GAAG,IAAI,CAACC,eAAe,CAACC,MAAM,EAAE;IAC3C,IAAIjB,YAAY,EAAE;MACd,OAAO,IAAIY,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;QACpCZ,kBAAkB,CAACkB,IAAI,CAAEb,KAAK,IAAK;UAC/BU,eAAe,CAACP,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGJ,KAAK;UACzDY,OAAO,CAACrB,aAAa,CAACmB,eAAe,CAAC,CAAC;QAC3C,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,MAAM;MACHhB,YAAY,GAAG,IAAI;MACnBgB,eAAe,CAACC,MAAM,GAAG,IAAI;MAE7B,OAAO,IAAIL,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;QACpChB,aAAa,CAACuB,IAAI,CAAC,eAAe,CAAC,CAAC;QAAA,CAC/BC,IAAI,CAAC,CAAC;UAAEC;QAAK,CAAC,KAAK;UAChBf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAED,IAAI,CAAChB,KAAK,CAAC;UACzCT,aAAa,CAAC2B,QAAQ,CAACf,OAAO,CAACgB,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,IAAI,CAAChB,KAAK;UAC/EU,eAAe,CAACP,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGa,IAAI,CAAChB,KAAK;UAEjEL,kBAAkB,CAACyB,OAAO,CAACC,EAAE,IAAIA,EAAE,CAACL,IAAI,CAAChB,KAAK,CAAC,CAAC;UAChDL,kBAAkB,GAAG,EAAE;UAEvBiB,OAAO,CAACrB,aAAa,CAACmB,eAAe,CAAC,CAAC;QAC3C,CAAC,CAAC,CACDY,KAAK,CAAEC,GAAG,IAAK;UACZhB,MAAM,CAACgB,GAAG,CAAC;UACX7B,YAAY,GAAG,KAAK;QACxB,CAAC,CAAC;MACV,CAAC,CAAC;IACN;EACJ;EACA,OAAOY,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}